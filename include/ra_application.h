/*
 * ra_application.h
 *
 *  Created on: Jun 10, 2020
 *      Author: andy
 */

#ifndef INCLUDE_RA_APPLICATION_H_
#define INCLUDE_RA_APPLICATION_H_

#include <c_port.h>


enum   RaDpiScalingPolicy  {
    /* Using 0 for an "unset" value */

    #ifdef CORRADE_TARGET_APPLE
    Framebuffer = 1,
    #endif

    #ifndef CORRADE_TARGET_APPLE
    Virtual = 2,

    Physical = 3,
    #endif

    Default
        #ifdef CORRADE_TARGET_APPLE
        = Framebuffer
        #else
        = Virtual
        #endif
};



/**
 * @brief Window flag
 *
 * @see @ref WindowFlags, @ref setWindowFlags()
 */
enum RaWindowFlags
{
    /**< Fullscreen window */
    Fullscreen = 1 << 0,

    /**
     * No window decoration
     */
    Borderless = 1 << 1,

    Resizable = 1 << 2,    /**< Resizable window */
    Hidden = 1 << 3,       /**< Hidden window */


    /**
     * Maximized window
     *
     * @note Supported since GLFW 3.2.
     */
    Maximized = 1 << 4,


    Minimized = 1 << 5,    /**< Minimized window */

    /**
     * Always on top
     * @m_since_latest
     */
    AlwaysOnTop = 1 << 6,

    /**
     * Automatically iconify (minimize) if fullscreen window loses
     * input focus
     */
    AutoIconify = 1 << 7,

    /**
     * Window has input focus
     *
     * @todo there's also GLFW_FOCUS_ON_SHOW, what's the difference?
     */
    Focused = 1 << 8,

    /**
     * Do not create any GPU context. Use together with
     * @ref GlfwApplication(const Arguments&),
     * @ref GlfwApplication(const Arguments&, const Configuration&),
     * @ref create(const Configuration&) or
     * @ref tryCreate(const Configuration&) to prevent implicit
     * creation of an OpenGL context.
     *
     * @note Supported since GLFW 3.2.
     */
    Contextless = 1 << 9,

    Windowless = 1 << 10

};

enum RaGLFlags  {

    /**
     * Forward compatible context
     *
     * @requires_gl Core/compatibility profile distinction and forward
     *      compatibility applies only to desktop GL.
     */
    ForwardCompatible = 1 << 0,
    /**
     * Specifies whether errors should be generated by the context.
     * If enabled, situations that would have generated errors instead
     * cause undefined behavior.
     *
     * @note Supported since GLFW 3.2.
     */
    NoError = 1 << 1,

    /**
     * Debug context. Enabled automatically if the
     * `--magnum-gpu-validation` @ref GL-Context-command-line "command-line option"
     * is present.
     */
    Debug = 1 << 2,

    Stereo = 1 << 3     /**< Stereo rendering */
};

#define RaVersionESMask  0x10000


/**
@brief OpenGL version

@see @ref version(), @ref Context, @ref MAGNUM_ASSERT_GL_VERSION_SUPPORTED()
*/
enum  RaGLVersion {
    None = 0xFFFF,                  /**< Unspecified */

    GL210 = 210,                    /**< OpenGL 2.1 / GLSL 1.20 */
    GL300 = 300,                    /**< OpenGL 3.0 / GLSL 1.30 */
    GL310 = 310,                    /**< OpenGL 3.1 / GLSL 1.40 */
    GL320 = 320,                    /**< OpenGL 3.2 / GLSL 1.50 */
    GL330 = 330,                    /**< OpenGL 3.3, GLSL 3.30 */
    GL400 = 400,                    /**< OpenGL 4.0, GLSL 4.00 */
    GL410 = 410,                    /**< OpenGL 4.1, GLSL 4.10 */
    GL420 = 420,                    /**< OpenGL 4.2, GLSL 4.20 */
    GL430 = 430,                    /**< OpenGL 4.3, GLSL 4.30 */
    GL440 = 440,                    /**< OpenGL 4.4, GLSL 4.40 */
    GL450 = 450,                    /**< OpenGL 4.5, GLSL 4.50 */
    GL460 = 460,                    /**< OpenGL 4.6, GLSL 4.60 */

    /**
     * OpenGL ES 2.0 or WebGL 1.0, GLSL ES 1.00.
     *
     * On desktop OpenGL, all related functionality is present in extension
     * @gl_extension{ARB,ES2_compatibility} (OpenGL 4.1), so testing for this
     * version using @ref Context::isVersionSupported() is equivalent to
     * testing for availability of that extension.
     */

    GLES200 = RaVersionESMask | 200,

    /**
     * OpenGL ES 3.0 or WebGL 2.0, GLSL ES 3.00.
     *
     * On desktop OpenGL, all related functionality is present in extension
     * @gl_extension{ARB,ES3_compatibility} (OpenGL 4.3), so testing for this
     * version using @ref Context::isVersionSupported() is equivalent to
     * testing for availability of that extension.
     */
    GLES300 = RaVersionESMask | 300,


    GLES310 = RaVersionESMask | 310,


    GLES320 = RaVersionESMask | 320
};


/**
 @brief OpenGL context configuration

 The created window is always with a double-buffered OpenGL context.
 */
struct RaGLConfig {


    /**
     * @brief Context flags
     *
     * @see @ref setFlags(), @ref GL::Context::Flags
     */
    uint32_t flags;

    /**
     * @brief Set context version
     *
     * If requesting version greater or equal to OpenGL 3.2, core profile
     * is used. The created context will then have any version which is
     * backwards-compatible with requested one. Default is
     * @ref GL::Version::None, i.e. any provided version is used.
     */
    RaGLVersion version;


    /**
       * @brief Set color buffer size
       *
       * Default is @cpp {8, 8, 8, 0} @ce (8-bit-per-channel RGB, no alpha).
       * @see @ref setDepthBufferSize(), @ref setStencilBufferSize()
       */
    int color_buffer_size[4];


    /**
     * @brief Set depth buffer size
     *
     * Default is @cpp 24 @ce bits.
     * @see @ref setColorBufferSize(), @ref setStencilBufferSize()
     */
    int depth_buffer_size;

    /**
     * @brief Set stencil buffer size
     *
     * Default is @cpp 0 @ce bits (i.e., no stencil buffer).
     * @see @ref setColorBufferSize(), @ref setDepthBufferSize()
     */
    int stencil_buffer_size;


    /**
     * @brief Set sample count
     * @return Reference to self (for method chaining)
     *
     * Default is @cpp 0 @ce, thus no multisampling. The actual sample
     * count is ignored, GLFW either enables it or disables. See also
     * @ref GL::Renderer::Feature::Multisampling.
     */
    int sample_count;


    /**
     * @brief Set sRGB-capable default framebuffer
     *
     * Default is @cpp false @ce. See also
     * @ref GL::Renderer::Feature::FramebufferSrgb.
     * @return Reference to self (for method chaining)
     */
    int is_rgb_capable;

};

struct RaApplicationConfig
{
    int argv;

    const char** argc;

    const char* title;

    int window_size[2];

    /**
     * @brief DPI scaling policy
     *
     * If @ref dpiScaling() is non-zero, it has a priority over this value.
     * The `--magnum-dpi-scaling` command-line option has a priority over
     * any application-set value.
     * @see @ref setSize(const Vector2i&, DpiScalingPolicy)
     */
    RaDpiScalingPolicy dpi_scaling_policy;

    /**
     * scaling of screen to frame buffer
     */
    float dpi_scaling[2];

    /**
     * Window flags
     */
    uint32_t window_flags;

};





#endif /* INCLUDE_RA_APPLICATION_H_ */
